#!/bin/bash

## ----------------------------------------------------------------------------
## A script to quickly build dpkgs or rpms from gem files.
## ----------------------------------------------------------------------------

## ----------------------------------------------------------------------------
## Author:        Urs Roesch <github@bun.ch>
## License:       MIT
## Requires:      bash >= 4, ruby, fpm, gem
## ----------------------------------------------------------------------------

## ----------------------------------------------------------------------------
## Setup
## ----------------------------------------------------------------------------
trap cleanup EXIT
set -o errexit
set -o nounset

## ----------------------------------------------------------------------------
## Globals
## ----------------------------------------------------------------------------
SCRIPT=${0##*/}
TARGET=${SCRIPT##*2}
WORK_DIR=${HOME}/tmp/gem-build-$$
OUT_DIR=${HOME}/var/${SCRIPT}
GEM_PATH=${WORK_DIR}:$(gem environment gempath)
PATH=${WORK_DIR}/bin:${PATH}
SUB_DIR=""
RPM_DIST=""
DEB_DIST=""
DIST_NAME=""
FPM_ARGS=(
 --force
 -d ruby
 --prefix $(gem environment gemdir)
 --epoch 0
 --deb-no-default-config-files
)
GEM_OPTS=()
declare -A GEMS
DEPENDENCIES=(
  fpm
  gem
)

## ----------------------------------------------------------------------------
## Exports
## ----------------------------------------------------------------------------
export GEM_PATH
export PATH

## ----------------------------------------------------------------------------
## Functions
## ----------------------------------------------------------------------------
get_dist() {
  case ${TARGET} in
    rpm) get_rpm_dist;;
    deb) get_deb_dist;;
  esac
}

## ----------------------------------------------------------------------------

get_deb_dist() {
  if which lsb_release &>/dev/null; then
    DEB_DIST=$(lsb_release -c | awk '{print $2}')
    DIST_NAME=${DEB_DIST}
  fi
}

## ----------------------------------------------------------------------------

get_rpm_dist() {
  rhel_release=/etc/redhat-release
  if [[ -f ${rhel_release} ]]; then
    version=$( sed 's/[^0-9.]//g' ${rhel_release} )
    if [[ -n ${version} ]]; then
      RPM_DIST=el${version:0:1}
      DIST_NAME=${RPM_DIST}
    fi
  fi
}

## ----------------------------------------------------------------------------

usage() {
  local exit_code=$1
  cat <<USAGE

  Usage:
    ${SCRIPT} <options> gem [-v <version>] [gem -v [<version>]  [..]]

  Options:
    --help              This message
    --dest-dir <path>   Set the destination directory for the finished packages
    --sub-dir  <dir>    Set the subdirectory under ${OUT_DIR}
                        for saving the packages
    --prerelease        Consider prerelases of gems
    gem -v |--version   Set the version of the gem to install.
                        Gem can either be file or the name of the gem.
                        The version switch is ignored if pointing to a gem file.

  Examples:
    Create package of the the my-gem in version 0.1
    ${SCRIPT} my-gem -v 0.1

    Create package of the the ~/my-gem-0.1.gem file
    ${SCRIPT} ~/my-gem-0.1.gem

USAGE
  exit ${exit_code}
}

## ----------------------------------------------------------------------------

parse_opts() {
  [[ $# -eq 0 ]] && usage 1
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|-help)     usage 0;;
      --dest-dir)   shift; OUT_DIR=$1;;
      --sub-dir)    shift; SUB_DIR=$1;;
      --prerelease) GEM_OPTS=( ${GEM_OPTS[@]-} $1);;
      -*)           usage 1;;
      *)
        gem=$1;
        version=''
        if [[ $# -gt 1 && ${2:0:1} == - ]]; then
          version="$3"
          shift 2;
        fi
        GEMS[${gem}]="${version}"
        ;;
    esac
    shift
  done
}

## ----------------------------------------------------------------------------

init_environment() {
  for dir in ${OUT_DIR}${SUB_DIR:+/${SUB_DIR}}/${DIST_NAME} ${WORK_DIR}; do
    if [[ ! -d ${dir} ]]; then
      mkdir -p ${dir}
    fi
  done
}


## ----------------------------------------------------------------------------

install_gem() {
  local gem="$1"; shift;
  local version="$1"; shift;

  gem install \
    ${GEM_OPTS[@]-} \
    ${version:+-v ${version}} \
    ${gem} \
    --install-dir ${WORK_DIR}/${gem} \
    --no-ri \
    --no-rdoc
}

## ----------------------------------------------------------------------------

gather_gems() {
  local gem="$1"; shift;
  if [[ -f ${gem} ]]; then
    echo "${gem}"
  else
    find ${WORK_DIR}/${gem}/cache -name '*.gem'
  fi
}

## ----------------------------------------------------------------------------

wrap_package() {
  local gem="$1"; shift;
  (
    cd ${OUT_DIR}/${SUB_DIR}/${DIST_NAME} &&
      gather_gems "${gem}" |
      xargs -rn1 fpm \
        ${FPM_ARGS[@]} \
        -s gem \
        -t ${TARGET} \
        ${RPM_DIST:+--rpm-dist ${RPM_DIST}}
  )
}

## ----------------------------------------------------------------------------

make_packages() {
  for gem in ${!GEMS[@]}; do
    if [[ -f "${gem}" ]]; then
      gem="$(readlink -f "${gem}")"
    else
      mkdir -p ${WORK_DIR}/${gem}
      install_gem "${gem}" "${GEMS[${gem}]}"
    fi
    wrap_package "${gem}"
  done
}

## ----------------------------------------------------------------------------

cleanup() {
  rm -rf ${WORK_DIR}
}

## ----------------------------------------------------------------------------
## Main
## ----------------------------------------------------------------------------
parse_opts "$@"
get_dist
init_environment
make_packages
